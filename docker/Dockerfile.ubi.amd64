FROM registry.access.redhat.com/ubi9-minimal:latest

LABEL vendor="Open Horizon"
LABEL summary="The secrets bao."
LABEL description="Bao manages secrets used by applications deployed to edge nodes."

# add license file
RUN mkdir -p /licenses
COPY LICENSE.txt /licenses

# This is the release of OpenBao to pull in and the key to verify the download.
ARG BAO_VERSION
ARG BAO_GPGKEY
ARG ARCH
ARG VAULT_PLUGIN_HASH
ARG DUMB_INIT_VERSION

# Create a bao user and group first so the IDs get set the same way.

# Set up certificates, our base tools, and Bao.
RUN set -eux; \
    microdnf update -y; \
    microdnf install -y ca-certificates shadow-utils gnupg openssl libcap wget tzdata unzip gzip tar && \
    found=''; \
    # for server in \
    #    hkp://p80.pool.sks-keyservers.net:80 \
    #    hkp://keyserver.ubuntu.com:80 \
    #    hkp://pgp.mit.edu:80 \
    #; do \
    #    echo "Fetching GPG key $BAO_GPGKEY from $server"; \
    #    gpg --batch --keyserver "$server" --recv-keys "$BAO_GPGKEY" && found=yes && break; \
    # done; \
    # test -z "$found" && echo >&2 "error: failed to fetch GPG key $BAO_GPGKEY" && exit 1; \
    mkdir -p /tmp/build && \
    cd /tmp/build && \
    wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v${DUMB_INIT_VERSION}/dumb-init_${DUMB_INIT_VERSION}_x86_64 && \
    chmod +x /usr/local/bin/dumb-init && \
    # wget https://github.com/openbao/openbao/releases/download/v${BAO_VERSION}/bao_${BAO_VERSION}_linux_amd64.pkg.tar.zst && \
    # wget https://releases.hashicorp.com/openbao/${BAO_VERSION}/bao_${BAO_VERSION}_linux_${ARCH}.zip && \
    # wget https://releases.hashicorp.com/openbao/${BAO_VERSION}/bao_${BAO_VERSION}_SHA256SUMS && \
    # wget https://releases.hashicorp.com/openbao/${BAO_VERSION}/bao_${BAO_VERSION}_SHA256SUMS.sig && \
    # gpg --batch --verify bao_${BAO_VERSION}_SHA256SUMS.sig bao_${BAO_VERSION}_SHA256SUMS && \
    # grep bao_${BAO_VERSION}_linux_${ARCH}.zip bao_${BAO_VERSION}_SHA256SUMS | sha256sum -c && \
    unzip -d /bin openbao_${BAO_VERSION}_linux_${ARCH}.zip && \
    cd /tmp && \
    rm -rf /tmp/build && \
    # gpgconf --kill dirmngr && \
    # gpgconf --kill gpg-agent  && \
    # rm -rf /root/.gnupg  && \
    microdnf clean all

# /vault/logs is made available to use as a location to store audit logs
# /vault/file is made available to use as a location with the file storage backend
# the server will be started with /vault/config as the configuration directory so you can add additional config files in that location.
RUN useradd -r -u 1000 -g root bao \
        && mkdir /home/bao \
        && chown -R bao:root /home/bao

ENV VAULT_PLUGIN_HASH ${VAULT_PLUGIN_HASH}
ENV HOME /home/bao
ENV VAULT_PLUGIN_AUTOMTLS_ENABLED false
RUN mkdir -p /vault/logs && \
    mkdir -p /vault/file && \
    mkdir -p /vault/config && \
    mkdir -p /vault/plugins && \
    mkdir -p /openhorizon/policy && \
    chown -R bao:root /vault && chown -R bao:root $HOME && chown -R bao:root /openhorizon && \
    chgrp -R 0 $HOME && chmod -R g+rwX $HOME && \
    chgrp -R 0 /vault && chmod -R g+rwX /vault && \
    chgrp -R 0 /openhorizon && chmod -R g+rwX /openhorizon


# Expose the logs directory as a volume since there's potentially long-running
# state in there
VOLUME /vault/logs

# Expose the file directory as a volume since there's potentially long-running
# state in there
VOLUME /vault/file

# 8200/tcp is the primary interface that applications use to interact with
# Bao.
EXPOSE 8200

# For production derivatives of this container, you shoud add the IPC_LOCK
# capability so that Bao can mlock memory.
RUN curl -4LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl && \
    chmod +x ./kubectl && \
    mv ./kubectl /usr/local/bin

COPY scripts/entrypoint.sh /usr/local/bin/entrypoint.sh
COPY scripts/auto-unseal.sh /usr/local/bin/auto-unseal.sh
COPY scripts/renewToken.sh /usr/local/bin/renewToken.sh

RUN chmod +x /usr/local/bin/entrypoint.sh && \
    chmod +x /usr/local/bin/auto-unseal.sh && \
    chmod +x /usr/local/bin/renewToken.sh

# The entry point script uses dumb-init as the top-level process to reap any
# zombie processes created by Bao sub-processes.
#
ENTRYPOINT ["entrypoint.sh"]

COPY bin/openbao-plugin-auth-openhorizon /vault/plugins/openbao-plugin-auth-openhorizon
COPY config/config.hcl /vault/config/config.hcl
COPY policy/agbot.acl.policy.hcl /openhorizon/policy/agbot.acl.policy.hcl

RUN chmod +x /vault/plugins/openbao-plugin-auth-openhorizon

USER bao

# By default you'll get a single-node development server that stores everything
# in RAM and bootstraps itself. Don't use this configuration for production.
CMD ["server", "-dev"]
